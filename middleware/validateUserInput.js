import { body, validationResult } from 'express-validator';

export const validateRegister = [
  // üßë‚Äçü¶± Nombre
  body('name')
    .notEmpty().withMessage('El nombre es obligatorio')
    .custom(value => {
      if (/^\s/.test(value)) throw new Error('El nombre no puede comenzar con espacios');
      if (!/^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√±√ú√º\s]+$/.test(value)) throw new Error('Nombre inv√°lido');
      if (/[<>"'\/\\&]/.test(value)) throw new Error('El nombre contiene caracteres peligrosos');
      return true;
    }),

  // üìß Email
  body('email')
    .notEmpty().withMessage('El email es obligatorio')
    .isEmail().withMessage('El email no es v√°lido')
    .custom(value => {
      if (/[<>"'\/\\&]/.test(value)) throw new Error('El email contiene caracteres peligrosos');
      return true;
    }),

  // üìû Tel√©fono
  body('phone')
    .notEmpty().withMessage('El tel√©fono es obligatorio')
    .isLength({ min: 10, max: 10 }).withMessage('El n√∫mero de tel√©fono debe tener exactamente 10 d√≠gitos')
    .matches(/^\d+$/).withMessage('Solo se permiten n√∫meros')
    .custom(value => {
      if (/[<>"'\/\\&]/.test(value)) throw new Error('El tel√©fono contiene caracteres peligrosos');
      return true;
    }),

  // üîê Contrase√±a
  body('password')
    .isLength({ min: 8 }).withMessage('La contrase√±a debe tener al menos 8 caracteres')
    .matches(/[A-Z]/).withMessage('Debe contener al menos una letra may√∫scula')
    .matches(/[a-z]/).withMessage('Debe contener al menos una letra min√∫scula')
    .matches(/[0-9]/).withMessage('Debe contener al menos un n√∫mero')
    .matches(/[!@#$%^&*()_+\-=\[\]{};:\\|,.?]/).withMessage('Debe contener al menos un car√°cter especial')
    .custom(value => {
      if (/[√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\s]/.test(value)) throw new Error("No se permiten '√±', tildes ni espacios en la contrase√±a");
      if (/[<>"'\/\\&]/.test(value)) throw new Error('La contrase√±a contiene caracteres peligrosos');
      return true;
    }),

  // ‚úÖ Confirmaci√≥n de contrase√±a
  body('validatePassword')
    .custom((value, { req }) => {
      if (value !== req.body.password) throw new Error('Las contrase√±as no coinciden');
      if (/[<>"'\/\\&]/.test(value)) throw new Error('La confirmaci√≥n contiene caracteres peligrosos');
      return true;
    }),

  // üéØ Manejador de errores: SOLO MUESTRA EL PRIMERO
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      const firstError = errors.array()[0].msg;
      return res.status(400).json({ message: firstError });
    }
    next();
  }
];

export const validateLogin = [
  // üìß Email o Tel√©fono
  body('email')
    .notEmpty().withMessage('El correo o n√∫mero de tel√©fono es obligatorio')
    .custom(value => {
      const isEmail = /^[^\s@]+@[^\s@]+\.[a-zA-Z]{2,}$/.test(value);
      const isPhone = /^[0-9]{10}$/.test(value);

      if (!isEmail && !isPhone) {
        throw new Error('Debe ingresar un email v√°lido o un n√∫mero telef√≥nico');
      }

      if (/[<>"'\/\\&]/.test(value)) {
        throw new Error('El campo contiene caracteres peligrosos');
      }

      return true;
    }),

  // üîê Contrase√±a
  body('password')
    .notEmpty().withMessage('La contrase√±a es obligatoria')
    .custom(value => {
      if (/[<>"'\/\\&]/.test(value)) {
        throw new Error('Contrase√±a inv√°lida: contiene caracteres no permitidos');
      }
      return true;
    }),

  // üéØ Manejador de errores: SOLO MUESTRA EL PRIMERO
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      const firstError = errors.array()[0].msg;
      return res.status(400).json({ message: firstError });
    }
    next();
  }
];



export const validateForgotPassword = [
  body('email')
    .notEmpty().withMessage('El email es obligatorio')
    .isEmail().withMessage('El formato del email no es v√°lido')
    .custom(value => {
      if (/[<>"'\/\\&]/.test(value)) {
        throw new Error('El email contiene caracteres peligrosos');
      }
      return true;
    }),

  // Manejador: solo muestra el primer error
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      const firstError = errors.array()[0].msg;
      return res.status(400).json({ message: firstError });
    }
    next();
  }
];


export const validateResetPassword = [
  // Token obligatorio
  body('token')
    .notEmpty()
    .withMessage('Token es obligatorio'),

  // Nueva contrase√±a con validaciones estrictas
  body('newPassword')
    .notEmpty()
    .withMessage('Nueva contrase√±a es obligatoria')
    .isLength({ min: 8 })
    .withMessage('La contrase√±a debe tener al menos 8 caracteres')
    .matches(/[A-Z]/)
    .withMessage('Debe contener al menos una letra may√∫scula')
    .matches(/[a-z]/)
    .withMessage('Debe contener al menos una letra min√∫scula')
    .matches(/[0-9]/)
    .withMessage('Debe contener al menos un n√∫mero')
    .matches(/[!@#$%^&*()_+\-=\[\]{};:\\|,.?]/)
    .withMessage('Debe contener al menos un car√°cter especial')
    .custom(value => {
      if (/[√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö\s]/.test(value)) throw new Error("No se permiten '√±', tildes ni espacios en la contrase√±a");
      if (/[<>"'\/\\&]/.test(value)) throw new Error('La contrase√±a contiene caracteres peligrosos');
      return true;
    }),

  // Confirmaci√≥n de contrase√±a
  body('newPasswordValidate')
    .notEmpty()
    .withMessage('Debes confirmar tu contrase√±a')
    .custom((value, { req }) => {
      if (value !== req.body.newPassword) throw new Error('Las contrase√±as no coinciden');
      if (/[<>"'\/\\&]/.test(value)) throw new Error('La confirmaci√≥n contiene caracteres peligrosos');
      return true;
    }),

  // Middleware para devolver errores
  (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ message: errors.array()[0].msg });
    }
    next();
  }
];